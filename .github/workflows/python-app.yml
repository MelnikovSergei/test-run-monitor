name: CI for Docker App with Selenium Tests

on:
  push:
    branches: []

jobs:
  Tests:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 3: Install Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # Step 4: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium pytest requests allure-pytest

    # Step 5: Install Allure CLI from GitHub
    - name: Install Allure CLI
      run: |
        ALLURE_VERSION=2.20.1
        curl -Lo allure-$ALLURE_VERSION.tgz https://github.com/allure-framework/allure2/releases/download/$ALLURE_VERSION/allure-$ALLURE_VERSION.tgz
        tar -zxvf allure-$ALLURE_VERSION.tgz
        sudo mv allure-$ALLURE_VERSION /usr/local/bin/allure
        sudo ln -s /usr/local/bin/allure/bin/allure /usr/bin/allure
        allure --version

    # Step 5.1: Clean up old Allure results
    - name: Clean Allure Results
      run: |
        rm -rf allure-results
        mkdir -p allure-results
        chmod 777 allure-results

    # Step 6: Create allure-results directory and set permissions
    - name: Create allure-results directory
      run: |
        mkdir -p allure-results
        chmod 777 allure-results

    # Step 7: Create the necessary environment and build the Docker container
    - name: Run docker-compose up --build
      run: |
        RUN_TESTS=false docker-compose up --build -d  # Set RUN_TESTS to false here

    # Step 8: Wait for the app to be ready
    - name: Wait for app to be ready
      run: |
        timeout=60
        while ! curl -s http://localhost:5000/health; do
          if [ $timeout -le 0 ]; then
            echo "Timed out waiting for app to be ready"
            exit 1
          fi
          echo "Waiting for app to be ready..."
          sleep 5
          timeout=$((timeout - 5))
        done
    # Step to check logs for test_runner
    - name: Check logs for test_runner
      run: |
        docker-compose logs test_runner
    # Step 9: Run tests with Allure
    - name: Run tests
      run: |
        docker-compose exec -T test_runner pytest tests/ --alluredir=/app/allure-results

    # Step 10: Generate Allure Report with clean flag and remove history
    - name: Generate Allure Report
      run: |
        allure generate --clean allure-results --output allure-report

    # Step 11: Deploy Allure Report to GitHub Pages
    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./allure-report
        publish_branch: gh-pages

    # Step 12: Tear down the Docker containers after testing
    - name: Tear down Docker containers
      run: |
        docker-compose down
